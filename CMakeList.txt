#############################################################################
#
#############################################################################

#Used macro already defined
# PROJECT_BINARY_DIR : Full path to build directory for project. File from which we launch the cmake
# PROJECT_SOURCE_DIR : Full path to source directory, the file where the cmakelist is


#-----------------------------------------------------------------------------
# Main project settings: name and version numbers
#-----------------------------------------------------------------------------
SET(PROJECT_NAME "8INF865-G2")
SET(PROJECT_VERSION_MAJOR 1)
SET(PROJECT_VERSION_MINOR 0)
SET(PROJECT_VERSION_PATCH 0)

cmake_minimum_required(VERSION 2.8)

#-----------------------------------------------------------------------------
# Set the project name
#-----------------------------------------------------------------------------
PROJECT(${PROJECT_NAME})

#-----------------------------------------------------------------------------
# the project name in lower characters
#-----------------------------------------------------------------------------
STRING(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOWER)

#-----------------------------------------------------------------------------
# PROJECT version number.  An even minor number corresponds to releases.
#-----------------------------------------------------------------------------
SET(PROJECT_VERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}")
SET(PROJECT_VERSION_FULL "${PROJECT_VERSION}.${PROJECT_VERSION_PATCH}") 

#-----------------------------------------------------------------------------
# Project settings
#-----------------------------------------------------------------------------
# The location in which to copy the headers
SET(PROJECT_INCLUDE_DIR "${PROJECT_BINARY_DIR}/include/${PROJECT_NAME_LOWER}")

# The location of the documentation
# For later
#SET(PROJECT_DOC_DIR "${PROJECT_BINARY_DIR}/doc")

# The location in which to install PROJECT library.
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)

# The include directory we depend on (usefull with -I compiler option)
SET(PROJECT_INTERN_INCLUDE_DIR "${PROJECT_SOURCE_DIR}\GameEngine")

# The internal PROJECT library name we want to create
SET(PROJECT_INTERN_LIBS ${PROJECT_NAME_LOWER})

# The third party include directories we depend on
SET(PROJECT_EXTERN_INCLUDE_DIR "")

#---------------------------------------------------------------------
# Platform dependent 
#----------------------------------------------------------------------
# The third party libraries we depend on

if (WIN32)

     SET(PROJECT_EXTERN_LIBS     ${OPENGL_LIBRARIES} glfw3 glew32s glu32 opengl32)
endif (WIN32)

if (UNIX)
  target_link_libraries (sample
          ${OPENGL_LIBRARIES}
          ${GLFW3_LIBRARY}
          ${GLEW_LIBRARY}
          Xxf86vm pthread Xrandr Xinerama Xi Xcursor)
# endif (UNIX)
SET(PROJECT_EXTERN_LIBS "")

#----------------------------------------------------------------------

# Every Libs used in the project
SET(LIBS ${PROJECT_INTERN_LIBS} ${PROJECT_EXTERN_LIBS})

# Additional defines (-D compiler option)
SET(PROJECT_DEFS "")

# Get the OS
SET(OS ${CMAKE_SYSTEM_NAME})

# where are user-specific cmake modules
# None for now
#SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMakeModules)
# If there are attach them with INCLUDE
# INCLUDE()

# Create include directory which will contain all the headers
MAKE_DIRECTORY(${PROJECT_INCLUDE_DIR})

#---------------------------------------------------------------------
# Choose static or shared libraries.
# Not used.
#---------------------------------------------------------------------
#OPTION(BUILD_SHARED_LIBS "Build a dynamic or shared library." OFF)

#----------------------------------------------------------------------
# Third party libraries
#----------------------------------------------------------------------
find_package (PkgConfig REQUIRED)
find_package (OpenGL REQUIRED)

#---------------------------------------------------------------------
# Platform dependent 
#----------------------------------------------------------------------
if (NOT WIN32)
set(CMAKE_MODULE_PATH /usr/local/lib/cmake /usr/local/lib/x86_64-linux-gnu/cmake)
set(CMAKE_PREFIX_PATH /usr/local/lib/cmake/glfw)
endif (NOT WIN32)

if (WIN32)
  include_directories( "${PROJECT_SOURCE_DIR}\Dependencies_x64\include")
  link_directories("${PROJECT_SOURCE_DIR}\Dependencies_x64\bin\Release")
  IF(NOT CYGWIN)
	SET(PROJECT_DEFS "${PROJECT_DEFS} -DWIN32")
  	SET(PROJECT_DEFS "${PROJECT_DEFS} -DGX") # To support exceptions
  ENDIF(NOT CYGWIN)
else (WIN32)
  find_package (glfw3 REQUIRED)
  find_package (GLM REQUIRED)
  find_package (GLUT REQUIRED)
  find_package (GLEW REQUIRED STATIC)
endif (WIN32)
IF(UNIX)
  	SET(PROJECT_DEFS "${PROJECT_DEFS} -DUNIX")
  	IF (APPLE)
  		include_directories(/usr/local/include)
  		find_library(COCOA_LIBRARY Cocoa REQUIRED)
  		find_library(IOKIT_LIBRARY IOKit REQUIRED)
  		find_library(COREVID_LIBRARY CoreVideo REQUIRED)
  		# We will not use rpath support.  Tell CMake to skip it.
    	SET(CMAKE_SKIP_RPATH 1 CACHE INTERNAL "Whether to build with rpath." FORCE)
    	SET(PROJECT_DEFS "${PROJECT_DEFS} -DAPPLE")
  	ENDIF (APPLE)
ENDIF(UNIX)


# ## "sample" is the name of the executable
# add_executable(sample ${SOURCE_FILES})
#   target_link_libraries (sample
#           ${GLFW3_LIBRARY}
#           ${OPENGL_LIBRARIES}
#           ${GLEW_LIBRARY}
#           ${COCOA_LIBRARY} ${COREVID_LIBRARY} ${IOKIT_LIBRARY})
# if (WIN32)
#   target_link_libraries (sample
#           ${OPENGL_LIBRARIES} glfw3 glew32s glu32 opengl32)
# endif (WIN32)

# if (UNIX)
#   target_link_libraries (sample
#           ${OPENGL_LIBRARIES}
#           ${GLFW3_LIBRARY}
#           ${GLEW_LIBRARY}
#           Xxf86vm pthread Xrandr Xinerama Xi Xcursor)
# endif (UNIX)


#----------------------------------------------------------------------
# Concatenate intern and third party include dirs
#----------------------------------------------------------------------
INCLUDE_DIRECTORIES(${PROJECT_INTERN_INCLUDE_DIR} {PROJECT_EXTERN_INCLUDE_DIR})

#----------------------------------------------------------------------
# Add library path
#----------------------------------------------------------------------
#LINK_DIRECTORIES(${PROJECT_SOURCE_DIR}/lib)

#----------------------------------------------------------------------
# Add definitions
#----------------------------------------------------------------------
ADD_DEFINITIONS(${PROJECT_DEFS})

#----------------------------------------------------------------------
# Propagation in sub dirs
#----------------------------------------------------------------------
SUBDIRS(GameEngine)

#----------------------------------------------------------------------
# customize uninstall target 
# Not Used for now
#----------------------------------------------------------------------
#CONFIGURE_FILE(
#  "${CMAKE_MODULE_PATH}/cmake_uninstall.cmake.in"
#  "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
#  IMMEDIATE @ONLY)

#ADD_CUSTOM_TARGET(uninstall
#  "${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake")

